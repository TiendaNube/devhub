version: 2.1

##### Aliases
restore-cache: &restore_cache
  restore_cache:
    keys:
      - yarn-packages-{{ checksum "yarn.lock" }}

save-cache: &save_cache
  save_cache:
    key: yarn-packages-{{ checksum "yarn.lock" }}
    paths:
      - ~/.cache

fast-checkout: &fast-checkout
  attach_workspace:
    at: /home/circleci

set_version_yarn_v3: &set_version_yarn_v3
  - run:
      name: "Set version yarn v3"
      command: yarn set version 3.2.2

install_deps: &install_deps
  - run:
      name: "Install deps"
      command: yarn install

filter-production: &filter-production
  branches:
    only: /master/
    ignore:
      - /.*/

##### ORBs
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@7.0.0
  eks: tiendanube/eks@1.7.2
  precheck: tiendanube/precheck@0.1.0
  slack: circleci/slack@3.4.2
  aws-s3: circleci/aws-s3@1.0.1
  build-tools: circleci/build-tools@2.9.1

##### Executors
executors:
  default:
    docker:
      - image: cimg/node:16.14.0
    resource_class: "large"
  python:
    docker:
      - image: circleci/python:3-stretch-browsers
    resource_class: "small"

##### Jobs
jobs:
  variable-validate:
    executor: python
    steps:
      - precheck/naming_validation_cmd:
          name_to_validate: << pipeline.git.branch >>
  checkout:
    executor: default
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *set_version_yarn_v3
      - <<: *install_deps
      - <<: *save_cache
      - run:
          name: "Configure CircleCI GitHub user"
          command: |
            git config user.email "ecosystemcircleci@tiendanube.com"
            git config user.name ${CIRCLE_USERNAME}
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - project/node_modules
  build:
    parameters:
      algolia_app_id:
        type: string
        default: ""
      algolia_api_key:
        type: string
        default: ""
      ga_tracking_id:
        type: string
        default: ""
      hotjar_id:
        type: string
        default: ""
    executor: default
    steps:
      - <<: *fast-checkout
      - run:
          name: Generate .env
          command: |
            cat > .env \<< EOF
              ALGOLIA_APP_ID=<< parameters.algolia_app_id >>
              ALGOLIA_API_KEY=<< parameters.algolia_api_key >>
              GA_TRACKING_ID=<< parameters.ga_tracking_id >>
              HOTJAR_ID=<< parameters.hotjar_id >>
            EOF
      - run:
          name: yarn build
          command: yarn build

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  send-s3-invalid-cache:
    parameters:
      cloudfront_id:
        type: string
      dir_build:
        type: string
        default: "build/"
      s3_bucket:
        type: string
    executor: eks/default
    steps:
      - <<: *fast-checkout
      - aws-cli/setup:
          aws-region: AWS_REGION_STAGING
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Send files to S3
          command: aws s3 sync  << parameters.dir_build >> << parameters.s3_bucket >>
      - run:
          name: invalidating cloudfront cache
          command: aws cloudfront create-invalidation --distribution-id << parameters.cloudfront_id >> --paths "/*"
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

##### Workflows
workflows:
  version: 2
  # Workflow: Production
  production-test-and-deploy:
    jobs:
      - checkout:
          filters:
            <<: *filter-production
      - build:
          context: microservices
          requires:
            - checkout
          filters:
            <<: *filter-production
          algolia_app_id: ${PROD_ALGOLIA_APP_ID}
          algolia_api_key: ${PROD_ALGOLIA_API_KEY}
          ga_tracking_id: ${PROD_GA_TRACKING_ID}
          hotjar_id: ${PROD_HOTJAR_ID}
      - send-s3-invalid-cache:
          name: send-s3-invalid-cache-pt
          cloudfront_id: ${CLOUDFRONT_PROD_ID_PT}
          s3_bucket: ${S3_PROD_PT}
          dir_build: ${DIR_BUILD_PT}
          context: microservices
          requires:
            - build
          filters:
            <<: *filter-production
      - send-s3-invalid-cache:
          name: send-s3-invalid-cache-es
          cloudfront_id: ${CLOUDFRONT_PROD_ID_ES}
          s3_bucket: ${S3_PROD_ES}
          dir_build: ${DIR_BUILD_ES}
          context: microservices
          requires:
            - build
          filters:
            <<: *filter-production
